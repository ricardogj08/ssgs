#!/bin/sh
#
# ssgs - A simple static blog generator written in POSIX sh.
#
# Copyright (C) 2021-2022 - Ricardo García Jiménez <ricardogj08@riseup.net>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this software except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Muestra mensajes de errores.
#
errors() {
  printf '%s.\n' "$1" >&2
  exit 1
}

#
# Muestra un mensaje de ayuda.
#
shelp() { printf '%s' "\
ssgs 2.0 - A simple static blog generator written in POSIX sh.

Synopsis:
  ssgs [OPTION]

Options:
  -b - Build blog.
"
exit 0
}

#
# Genera un enlace HTML.
# @param $1: Nombre del archivo.
# @param $2: Tìtulo del enlace.
#
ahref() {
  printf '<a href="%s/%s">%s</a>\n' \
    "$SSGS_URL" "$1" "$2"
}

#
# Obtiene el tìtulo de una página HTML.
# @param $1: Cuerpo de la página.
#
get_title() {
  title=$(printf '%s\n' "$1" | grep -e '^<h1>' | head -n 1)

  title=${title#<h1>}
  title=${title%</h1>}

  printf '%s\n' "$title"
}

#
# Genera una barra de navegación.
#
navbar() {
  ahref "index.html" "$SSGS_NEWS"
  ahref "all-articles.html" "$SSGS_ALL"

  [ "$SSGS_NAVBAR" ] &&
    for file in $SSGS_NAVBAR; do
      body=$(smu "$file.md" 2>/dev/null)

      title=$(get_title "$body")

      ahref "$file.html" "$title"
    done

  ahref "atom.xml" "$SSGS_FEED"
}

#
# Obtiene la fecha de modificación de un archivo.
# @param $1: Path del archivo.
# @param $2: Formato de fecha.
#
mdate() {
  #
  # Si 'date -r' falla, utiliza la fecha actual.
  #
  LC_ALL=C date -r "$1" "$2" 2>/dev/null ||
    LC_ALL=C date "$2"
}

#
# Genera el maquetado completo de una página web.
# @param $1: Cuerpo de la página.
#
template() { cat << EOF
<!doctype html>
<html lang="${SSGS_LANG}">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" href="${SSGS_CSS}" crossorigin="anonymous">
<title>${TITLE}</title>
</head>
<body>
<header>
<h1><a href="${SSGS_URL}/index.html">${SSGS_TITLE}</a></h1>
<p>${SSGS_SUBTITLE}</p>
<nav>
${NAVBAR}
</nav>
</header>
<main>
<article>
${1}
</article>
</main>
<footer>
<p>${SSGS_LICENSE}</p>
<p>Generated with <a href="https://github.com/ricardogj08/ssgs" target="_blank">ssgs</a>, a simple static blog generator written in POSIX sh</p>
</footer>
</body>
</html>
EOF
}

#
# Genera el encabezado del feed de Atom.
#
atom_header() { cat << EOF
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="${SSGS_LANG}">
<id>${SSGS_URL}/atom.xml</id>
<title>${SSGS_TITLE}</title>
<updated>$(LC_ALL=C date "$FDATE")</updated>
<author>
  <name>${SSGS_TITLE}</name>
</author>
<link rel="self" href="${SSGS_URL}/atom.xml" type="application/atom+xml"/>
<link rel="alternate" href="${SSGS_URL}"/>
<generator uri="https://github.com/ricardogj08/ssgs" version="2.0">ssgs</generator>
EOF
}

#
# Genera una entrada para el feed de Atom.
#
entry() { cat << EOF
<entry>
  <id>${URL}</id>
  <title>${TITLE}</title>
  <updated>${DATE}</updated>
  <author>
    <name>${SSGS_TITLE}</name>
  </author>
  <link rel="alternate" href="${URL}"/>
</entry>
EOF
}

#
# Genera el cuerpo inicial para index.html y all-articles.html
# @param $1: Tìtulo de la página.
#
initp() {
  printf '<h1>%s</h1>\n<ul>\n' "$1"
}

#
# Cierre del cuerpo para index.html y all-articles.html
#
endp() {
  printf '\n</ul>\n'
}

#
# Lista un artículo.
#
item() {
  printf '\n<li>%s - <a href="%s">%s</a></li>\n' \
    "$DATE" "$URL" "$TITLE"
}

#
# Construye el blog a HTML.
#
render() {
  articles=$(cd src && find . -type f -name \*.md -exec ls -t {} +)

  cd docs || :

  NAVBAR=$(navbar)

  FDATE=+%Y-%m-%dT%H:%M:%SZ

  ibody=$(initp "$SSGS_NEWS")
  abody=$(initp "$SSGS_ALL")

  atom_header > atom.xml

  i=0

  for article in $articles; do
    #
    # Cambia la extensión de un archivo Markdown a HTML.
    #
    path=${article%.md}.html

    #
    # URL del artículo.
    #
    URL=${SSGS_URL}/${path#./}

    #
    # Convierte el contenido del archivo a HTML.
    #
    body=$(smu "$article" 2>/dev/null)

    #
    # Título del artículo.
    #
    TITLE=$(get_title "$body")

    #
    # Fecha de modificación del artículo.
    #
    DATE=$(mdate "$article" "+%Y-%m-%d")

    #
    # Agrega un nuevo artículo en all-articles.html
    #
    abody=${abody}$(item)

    #
    # Agrega una entrada al feed de atom.
    #
    [ "$i" -lt "$SSGS_LIMIT" ] && {
      #
      # Agrega un nuevo artículo en index.html
      #
      ibody=${ibody}$(item)

      DATE=$(mdate "$article" "$FDATE")

      entry >> atom.xml

      i=$((i + 1))
    }

    #
    # Renombra el archivo Markdown a HTML.
    #
    mv "$article" "$path"

    #
    # Renderiza la página HTML.
    #
    template "$body" > "$path"
  done

  template "${ibody}$(endp)" > index.html

  template "${abody}$(endp)" > all-articles.html

  printf '</feed>\n' >> atom.xml
}

main() {
  command -v smu >/dev/null 2>&1 ||
    errors "'smu' not found"

  mkdir -p src docs ||
    errors "Couldn't create blog directories"

  cp -R -fp src/. docs 2>/dev/null ||
    errors "Couldn't access 'src' or 'docs' directory"

  #
  # shellcheck source=/dev/null
  #
  [ -r ssgs.cfg ] && . ./ssgs.cfg

  #
  # Configuración por defecto.
  #
  : "${SSGS_TITLE:=ssgs}"
  : "${SSGS_SUBTITLE:=A simple static blog generator written in POSIX sh}"
  : "${SSGS_URL:=$PWD/docs}"
  : "${SSGS_LANG:=es}"
  : "${SSGS_CSS:=https://cdn.jsdelivr.net/npm/markdown-retro@0.0.1/css/retro.css}"
  : "${SSGS_NEWS:=News}"
  : "${SSGS_ALL:=Articles}"
  : "${SSGS_FEED:=Feed}"
  : "${SSGS_LIMIT:=15}"
  : "${SSGS_LICENSE:=Licensed under CC BY-SA 4.0}"

  SSGS_URL=${SSGS_URL%/}

  render
}

[ "$1" = -b ] || shelp && main
