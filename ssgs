#!/bin/sh
#
# ssgs - A simple static blog generator written in POSIX sh.
#
# Copyright (C) 2021 - Ricardo García Jiménez <ricardogj08@riseup.net>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this software except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Muestra mensajes de errores.
errors() {
  printf '%s.\n' "$1" >&2
  exit 1
}

# Muestra un mensaje de ayuda.
shelp() { printf '%s' "\
ssgs 1.0 - A simple static blog generator written in POSIX sh.

Synopsis:
  ssgs [OPTION]

Options:
  -b - Build blog.
"
exit 0
}

# Obtiene el primer título principal de una página.
get_title() {
  title=$(printf '%s\n' "$1" | grep -e '^<h1>' | head -n 1)

  title=${title#<h1>}
  title=${title%</h1>}

  printf '%s\n' "$title"
}

# Genera una barra de navegación.
render_navbar() {
  printf '<a href="%s%s">%s</a>\n' "$ssgs_url" "$index" "$ssgs_new_posts"
  printf '<a href="%s%s">%s</a>\n' "$ssgs_url" "$all_posts" "$ssgs_all_posts"

  [ "$ssgs_navbar" ] && for file in $ssgs_navbar; do
    post_body=$(smu "$file".md 2>/dev/null)

    post_title=$(get_title "$post_body")

    printf '<a href="%s%s.html">%s</a>\n' "$ssgs_url" "$file" "$post_title"
  done

  printf '<a href="%s">Feed</a>\n' "$feed_url"
}

# Genera el maquetado completo de una página web.
template() { cat << EOF
<!DOCTYPE html>
<html lang="${ssgs_lang}">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" href="${ssgs_style}">
<title>${post_title}</title>
</head>
<body>
<header>
<h1><a href="${ssgs_url}${index}">${ssgs_title}</a></h1>
<p>${ssgs_subtitle}</p>
<nav>
${navbar}
</nav>
</header>
<main>
<article>
${post_body}
</article>
</main>
<footer>
<p>${ssgs_license}</p>
<p>Generated with <a href="https://github.com/ricardogj08/ssgs" target="_blank">ssgs</a>, a simple static blog generator written in POSIX sh.</p>
</footer>
</body>
</html>
EOF
}

# Define el maquetado inicial para 'index.html' y 'all-posts.html'.
init_page() { printf '<h1>%s</h1>\n<ul>\n' "$1"; }

# Define el cierre del maquetado para 'index.html' y 'all-posts.html'.
end_page() { printf '%s\n</ul>\n' "$1"; }

# Agrega una nueva publicación en la lista.
item() { printf '%s\n<li>%s - <a href="%s">%s</a></li>\n' "$1" "$2" "$3" "$4"; }

# Obtiene la fecha de modificación de un archivo.
# Si 'date -r' falla, utiliza la fecha actual.
pdate() { LC_ALL=C date -r "$1" "$2" 2>/dev/null || LC_ALL=C date "$2"; }

# Genera el maquetado completo de un feed de Atom.
atom_feed() { cat << EOF
<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="${ssgs_lang}">
<id>${feed_url}</id>
<title>${ssgs_title}</title>
<updated>$(LC_ALL=C date "$feed_date_format")</updated>
<author>
  <name>${ssgs_title}</name>
</author>
<link rel="self" href="${feed_url}" type="application/atom+xml"/>
<link rel="alternate" href="${ssgs_url}"/>
<generator uri="https://github.com/ricardogj08/ssgs" version="1.0">ssgs</generator>
${entries}
</feed>
EOF
}

# Renderiza todas las páginas Markdown a HTML.
render_pages() {
  all_posts_body=$(init_page "$ssgs_all_posts")
  index_body=$(init_page "$ssgs_new_posts")

  itr=0

  for post in $posts; do
    # Cambia la extensión de un archivo Markdown a HTML.
    post_path=${post%.md}.html

    # Define la URL de la publicación.
    post_url=${ssgs_url}${post_path#./}

    # Convierte el contenido de un archivo Markdown a HTML.
    post_body=$(smu "$post" 2>/dev/null)

    post_title=$(get_title "$post_body")

    # Fecha de la publicación.
    post_date=$(pdate "$post" "$post_date_format")

    # Renombra el archivo Markdown a HTML.
    mv "$post" "$post_path"

    # Renderiza la página HTML.
    template > "$post_path"

    # Agrega una nueva publicación en 'all-posts.html'.
    all_posts_body=$(item "$all_posts_body" "$post_date" "$post_url" "$post_title")

    # Agrega una nueva publicación en 'index.html' y una nueva entrada en 'entries'.
    [ "$itr" -lt "$ssgs_posts" ] && {
      index_body=$(item "$index_body" "$post_date" "$post_url" "$post_title")

      entry_date=$(pdate "$post" "$post_date_format")

      itr=$((itr + 1))
    }
  done

  # Renderiza la página 'all-posts.html'.
  post_title=${ssgs_all_posts}
  post_body=$(end_page "$all_posts_body")
  template > "$all_posts"

  # Renderiza la página 'index.html'.
  post_title=${ssgs_title}
  post_body=$(end_page "$index_body")
  template > "$index"

  # Renderiza el feed de Atom.
  atom_feed > "$feed"
}

main() {
  [ "$1" != '-b' ] && shelp

  command -v smu 2>/dev/null >&2 ||
    errors "'smu' not found"

  # Define la ruta del archivo de configuración
  # y los directorios de trabajo.
  config=${PWD}/ssgs.config
  build=${PWD}/build
  src=${PWD}/src

  mkdir -p "$build" "$src" 2>/dev/null ||
    errors "Could not create working directories"

  cp -R -fp "$src"/. "$build" 2>/dev/null ||
    errors "Could not access 'src' or 'build' directory"

  cd "$build" || :

  # Obtiene todas las publicaciones ordenadas por fecha de modificación.
  posts=$(cd "$src" && find . -type f -name '*.md' -exec ls -t {} +)

  # shellcheck source=/dev/null
  [ -r "$config" ] && . "$config"

  # Configuración por defecto.
  : "${ssgs_lang:=en}"
  : "${ssgs_style:=https://cdn.jsdelivr.net/npm/markdown-retro@0.0.1/css/retro.css}"
  : "${ssgs_url:=$build}"
  : "${ssgs_title:=ssgs blog}"
  : "${ssgs_subtitle:=A blog about shell scripting}"
  : "${ssgs_all_posts:=All posts}"
  : "${ssgs_new_posts:=New posts}"
  : "${ssgs_posts:=10}"
  : "${ssgs_license:=Licensed under CC BY-SA 4.0}"

  ssgs_url=${ssgs_url%${ssgs_url##*[!/]}}/

  index=index.html
  all_posts=all-posts.html
  feed=atom.xml

  feed_url=${ssgs_url}${feed}

  post_date_format=+%Y-%m-%d
  feed_date_format=+%Y-%m-%dT%H:%M:%SZ

  navbar=$(render_navbar)

  render_pages
}

main "$@"
